
02-knightrider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d8  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068d  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004bd  00000000  00000000  000011f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006d6f  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f8  00000000  00000000  00008447  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000863f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000002f2  00000000  00000000  0000864f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	02 d0       	rcall	.+4      	; 0x7a <main>
  76:	9a c0       	rjmp	.+308    	; 0x1ac <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <main>:
int main(void)
{
    /* INITIALIZATION */
    /* LED 1 */
	// Set pin as output in Data Direction Register...
    DDRB = DDRB | (1<<LED_1);
  7a:	21 9a       	sbi	0x04, 1	; 4
    // ...and turn LED off in Data Register
    PORTB = PORTB & ~(1<<LED_1);
  7c:	29 98       	cbi	0x05, 1	; 5
	
    /* LED 2 */
	DDRB = DDRB | (1<<LED_2);
  7e:	22 9a       	sbi	0x04, 2	; 4
	PORTB = PORTB & ~(1<<LED_2);
  80:	2a 98       	cbi	0x05, 2	; 5
	
    /* LED 3 */
    DDRB = DDRB | (1<<LED_3);
  82:	23 9a       	sbi	0x04, 3	; 4
    PORTB = PORTB & ~(1<<LED_3);
  84:	2b 98       	cbi	0x05, 3	; 5

    /* LED 4 */
    DDRB = DDRB | (1<<LED_4);
  86:	24 9a       	sbi	0x04, 4	; 4
    PORTB = PORTB & ~(1<<LED_4);
  88:	2c 98       	cbi	0x05, 4	; 5

    /* LED 5 */
    DDRB = DDRB | (1<<LED_5);
  8a:	25 9a       	sbi	0x04, 5	; 4
    PORTB = PORTB & ~(1<<LED_5);
  8c:	2d 98       	cbi	0x05, 5	; 5
	
	/* button */
	DDRD = DDRD & ~(1<<BTN);
  8e:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<BTN);
  90:	58 9a       	sbi	0x0b, 0	; 11
	
    PORTB = PORTB ^ (1<<LED_1);					// turn LED1 on
  92:	95 b1       	in	r25, 0x05	; 5
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	89 27       	eor	r24, r25
  98:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	33 ec       	ldi	r19, 0xC3	; 195
  9e:	69 e0       	ldi	r22, 0x09	; 9
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	30 40       	sbci	r19, 0x00	; 0
  a4:	60 40       	sbci	r22, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x26>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x30>
  aa:	00 00       	nop
    while (1)
    {		
		if (bit_is_clear(PIND, BTN))
		{
		/* FORWARD */
			PORTB = PORTB ^ (1<<LED_1);			// turn LED1 off
  ac:	52 e0       	ldi	r21, 0x02	; 2
			PORTB = PORTB ^ (1<<LED_2);			// turn LED2 on
  ae:	24 e0       	ldi	r18, 0x04	; 4
			_delay_ms(BLINK_DELAY);				// wait 200 ms

			PORTB = PORTB ^ (1<<LED_2);			// turn LED2 off
			PORTB = PORTB ^ (1<<LED_3);			// turn LED3 on
  b0:	98 e0       	ldi	r25, 0x08	; 8
			_delay_ms(BLINK_DELAY);				// wait 200 ms

			PORTB = PORTB ^ (1<<LED_3);			// turn LED3 off
			PORTB = PORTB ^ (1<<LED_4);			// turn LED4 on
  b2:	80 e1       	ldi	r24, 0x10	; 16
			_delay_ms(BLINK_DELAY);				// wait 200 ms

			PORTB = PORTB ^ (1<<LED_4);			// turn LED4 off
			PORTB = PORTB ^ (1<<LED_5);			// turn LED5 on
  b4:	40 e2       	ldi	r20, 0x20	; 32
	_delay_ms(BLINK_DELAY);						// wait
	
	// Infinite loop
    while (1)
    {		
		if (bit_is_clear(PIND, BTN))
  b6:	48 99       	sbic	0x09, 0	; 9
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <main+0x3c>
		{
		/* FORWARD */
			PORTB = PORTB ^ (1<<LED_1);			// turn LED1 off
  ba:	35 b1       	in	r19, 0x05	; 5
  bc:	35 27       	eor	r19, r21
  be:	35 b9       	out	0x05, r19	; 5
			PORTB = PORTB ^ (1<<LED_2);			// turn LED2 on
  c0:	35 b1       	in	r19, 0x05	; 5
  c2:	32 27       	eor	r19, r18
  c4:	35 b9       	out	0x05, r19	; 5
  c6:	7f ef       	ldi	r23, 0xFF	; 255
  c8:	33 ec       	ldi	r19, 0xC3	; 195
  ca:	69 e0       	ldi	r22, 0x09	; 9
  cc:	71 50       	subi	r23, 0x01	; 1
  ce:	30 40       	sbci	r19, 0x00	; 0
  d0:	60 40       	sbci	r22, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x52>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x5c>
  d6:	00 00       	nop
			_delay_ms(BLINK_DELAY);				// wait 200 ms

			PORTB = PORTB ^ (1<<LED_2);			// turn LED2 off
  d8:	35 b1       	in	r19, 0x05	; 5
  da:	32 27       	eor	r19, r18
  dc:	35 b9       	out	0x05, r19	; 5
			PORTB = PORTB ^ (1<<LED_3);			// turn LED3 on
  de:	35 b1       	in	r19, 0x05	; 5
  e0:	39 27       	eor	r19, r25
  e2:	35 b9       	out	0x05, r19	; 5
  e4:	7f ef       	ldi	r23, 0xFF	; 255
  e6:	33 ec       	ldi	r19, 0xC3	; 195
  e8:	69 e0       	ldi	r22, 0x09	; 9
  ea:	71 50       	subi	r23, 0x01	; 1
  ec:	30 40       	sbci	r19, 0x00	; 0
  ee:	60 40       	sbci	r22, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x70>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x7a>
  f4:	00 00       	nop
			_delay_ms(BLINK_DELAY);				// wait 200 ms

			PORTB = PORTB ^ (1<<LED_3);			// turn LED3 off
  f6:	35 b1       	in	r19, 0x05	; 5
  f8:	39 27       	eor	r19, r25
  fa:	35 b9       	out	0x05, r19	; 5
			PORTB = PORTB ^ (1<<LED_4);			// turn LED4 on
  fc:	35 b1       	in	r19, 0x05	; 5
  fe:	38 27       	eor	r19, r24
 100:	35 b9       	out	0x05, r19	; 5
 102:	7f ef       	ldi	r23, 0xFF	; 255
 104:	33 ec       	ldi	r19, 0xC3	; 195
 106:	69 e0       	ldi	r22, 0x09	; 9
 108:	71 50       	subi	r23, 0x01	; 1
 10a:	30 40       	sbci	r19, 0x00	; 0
 10c:	60 40       	sbci	r22, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x8e>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x98>
 112:	00 00       	nop
			_delay_ms(BLINK_DELAY);				// wait 200 ms

			PORTB = PORTB ^ (1<<LED_4);			// turn LED4 off
 114:	35 b1       	in	r19, 0x05	; 5
 116:	38 27       	eor	r19, r24
 118:	35 b9       	out	0x05, r19	; 5
			PORTB = PORTB ^ (1<<LED_5);			// turn LED5 on
 11a:	35 b1       	in	r19, 0x05	; 5
 11c:	34 27       	eor	r19, r20
 11e:	35 b9       	out	0x05, r19	; 5
 120:	7f ef       	ldi	r23, 0xFF	; 255
 122:	33 ec       	ldi	r19, 0xC3	; 195
 124:	69 e0       	ldi	r22, 0x09	; 9
 126:	71 50       	subi	r23, 0x01	; 1
 128:	30 40       	sbci	r19, 0x00	; 0
 12a:	60 40       	sbci	r22, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0xac>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0xb6>
 130:	00 00       	nop
			_delay_ms(BLINK_DELAY);				// wait 200 ms

		/* BACK */
			PORTB = PORTB ^ (1<<LED_5);			// turn LED5 off
 132:	35 b1       	in	r19, 0x05	; 5
 134:	34 27       	eor	r19, r20
 136:	35 b9       	out	0x05, r19	; 5
			PORTB = PORTB ^ (1<<LED_4);			// turn LED4 on
 138:	35 b1       	in	r19, 0x05	; 5
 13a:	38 27       	eor	r19, r24
 13c:	35 b9       	out	0x05, r19	; 5
 13e:	7f ef       	ldi	r23, 0xFF	; 255
 140:	33 ec       	ldi	r19, 0xC3	; 195
 142:	69 e0       	ldi	r22, 0x09	; 9
 144:	71 50       	subi	r23, 0x01	; 1
 146:	30 40       	sbci	r19, 0x00	; 0
 148:	60 40       	sbci	r22, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0xca>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xd4>
 14e:	00 00       	nop
			_delay_ms(BLINK_DELAY);				// wait 200 ms

			PORTB = PORTB ^ (1<<LED_4);			// turn LED4 off
 150:	35 b1       	in	r19, 0x05	; 5
 152:	38 27       	eor	r19, r24
 154:	35 b9       	out	0x05, r19	; 5
			PORTB = PORTB ^ (1<<LED_3);			// turn LED3 on
 156:	35 b1       	in	r19, 0x05	; 5
 158:	39 27       	eor	r19, r25
 15a:	35 b9       	out	0x05, r19	; 5
 15c:	7f ef       	ldi	r23, 0xFF	; 255
 15e:	33 ec       	ldi	r19, 0xC3	; 195
 160:	69 e0       	ldi	r22, 0x09	; 9
 162:	71 50       	subi	r23, 0x01	; 1
 164:	30 40       	sbci	r19, 0x00	; 0
 166:	60 40       	sbci	r22, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0xe8>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0xf2>
 16c:	00 00       	nop
			_delay_ms(BLINK_DELAY);				// wait 200 ms

			PORTB = PORTB ^ (1<<LED_3);			// turn LED3 off
 16e:	35 b1       	in	r19, 0x05	; 5
 170:	39 27       	eor	r19, r25
 172:	35 b9       	out	0x05, r19	; 5
			PORTB = PORTB ^ (1<<LED_2);			// turn LED2 on
 174:	35 b1       	in	r19, 0x05	; 5
 176:	32 27       	eor	r19, r18
 178:	35 b9       	out	0x05, r19	; 5
 17a:	7f ef       	ldi	r23, 0xFF	; 255
 17c:	33 ec       	ldi	r19, 0xC3	; 195
 17e:	69 e0       	ldi	r22, 0x09	; 9
 180:	71 50       	subi	r23, 0x01	; 1
 182:	30 40       	sbci	r19, 0x00	; 0
 184:	60 40       	sbci	r22, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x106>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x110>
 18a:	00 00       	nop
			_delay_ms(BLINK_DELAY);				// wait 200 ms

			PORTB = PORTB ^ (1<<LED_2);			// turn LED2 off
 18c:	35 b1       	in	r19, 0x05	; 5
 18e:	32 27       	eor	r19, r18
 190:	35 b9       	out	0x05, r19	; 5
			PORTB = PORTB ^ (1<<LED_1);			// turn LED1 on
 192:	35 b1       	in	r19, 0x05	; 5
 194:	35 27       	eor	r19, r21
 196:	35 b9       	out	0x05, r19	; 5
 198:	7f ef       	ldi	r23, 0xFF	; 255
 19a:	33 ec       	ldi	r19, 0xC3	; 195
 19c:	69 e0       	ldi	r22, 0x09	; 9
 19e:	71 50       	subi	r23, 0x01	; 1
 1a0:	30 40       	sbci	r19, 0x00	; 0
 1a2:	60 40       	sbci	r22, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x124>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x12e>
 1a8:	00 00       	nop
 1aa:	85 cf       	rjmp	.-246    	; 0xb6 <main+0x3c>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
